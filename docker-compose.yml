version: '3.8'

services:
  # Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
    depends_on:
      - app
      - bot
    networks:
      - backend
    restart: unless-stopped

  # Main Application
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-viewbot}
      DB_USER: ${DB_USER:-viewbot}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      APP_DOMAIN: ${APP_DOMAIN:-app.viewbot.com}
    volumes:
      - ./app:/app
      - ./shared:/app/shared:ro
      - app_node_modules:/app/node_modules
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - backend
    restart: unless-stopped
    command: npm start

  # Bot System
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-viewbot}
      DB_USER: ${DB_USER:-viewbot}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      BOT_DOMAIN: ${BOT_DOMAIN:-bot.viewbot.com}
      MAIN_APP_API: http://app:3000/api
      BOT_MEDIA_DIR: /app/media
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./bot:/app
      - ./shared:/app/shared:ro
      - ./bot-media:/app/media:ro
      - bot_node_modules:/app/node_modules
      - bot_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - minio
      - app
    networks:
      - backend
    restart: unless-stopped
    command: npm start

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-viewbot}
      POSTGRES_USER: ${DB_USER:-viewbot}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-viewbot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Database migrations runner
  migrate:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-viewbot}
      DB_USER: ${DB_USER:-viewbot}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./shared:/app/shared:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    command: npm run migrate
    restart: "no"

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  app_node_modules:
  bot_node_modules:
  bot_logs: